syntax = "proto3";

package v1;

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

// https://github.com/grpc-ecosystem/grpc-gateway/blob/ab0345bb328757bfef2f3d7d4e642e182eb985b9/examples/proto/examplepb/a_bit_of_everything.proto
option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "ping pong service";
		version: "1.0";
		contact: {
			name: "react-gRPC";
        };
    };
    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";
    responses: {
		key: "404";
		value: {
			description: "Returned when the resource does not exist.";
			schema: {
				json_schema: {
					type: STRING;
				}
			}
		}
	}
};

message PingRequest {
    string ping = 1;
}

message PongResponse {
    string pong = 1;
}

message FetchPingCountRequest {
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;
}

message FetchPingCountResponse {
    string api = 1;

    // Ping total count
    int64 count = 2;
}

message ServerStreamPingPongRequest {
    string ping = 1;
    int32 ping_count = 2;
    int32 ping_interval = 3;
}

message ServerStreamPingPongResponse {
    string pong = 1;
}

service PingPongService {
    rpc PingPong(PingRequest) returns (PongResponse);

    rpc FetchPingCount(FetchPingCountRequest) returns (FetchPingCountResponse) {
        option (google.api.http) = {
            get: "/v1/count"
        };
    }

    rpc ServerStreamPingPong(ServerStreamPingPongRequest) returns (stream ServerStreamPingPongResponse);
}
